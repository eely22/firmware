/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Sat Dec 23 23:53:02 2017. */

#ifndef PB_PARTICLE_CTRL_UPDATE_PB_H_INCLUDED
#define PB_PARTICLE_CTRL_UPDATE_PB_H_INCLUDED
#include <pb.h>

#include "common.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _particle_ctrl_CancelFirmwareUpdateReply {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_CancelFirmwareUpdateReply) */
} particle_ctrl_CancelFirmwareUpdateReply;

typedef struct _particle_ctrl_CancelFirmwareUpdateRequest {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_CancelFirmwareUpdateRequest) */
} particle_ctrl_CancelFirmwareUpdateRequest;

typedef struct _particle_ctrl_FinishFirmwareUpdateReply {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_FinishFirmwareUpdateReply) */
} particle_ctrl_FinishFirmwareUpdateReply;

typedef struct _particle_ctrl_SaveFirmwareChunkReply {
    char dummy_field;
/* @@protoc_insertion_point(struct:particle_ctrl_SaveFirmwareChunkReply) */
} particle_ctrl_SaveFirmwareChunkReply;

typedef struct _particle_ctrl_SaveFirmwareChunkRequest {
    pb_callback_t data;
/* @@protoc_insertion_point(struct:particle_ctrl_SaveFirmwareChunkRequest) */
} particle_ctrl_SaveFirmwareChunkRequest;

typedef struct _particle_ctrl_FinishFirmwareUpdateRequest {
    bool validate_only;
/* @@protoc_insertion_point(struct:particle_ctrl_FinishFirmwareUpdateRequest) */
} particle_ctrl_FinishFirmwareUpdateRequest;

typedef struct _particle_ctrl_PrepareFirmwareUpdateReply {
    uint32_t chunk_size;
/* @@protoc_insertion_point(struct:particle_ctrl_PrepareFirmwareUpdateReply) */
} particle_ctrl_PrepareFirmwareUpdateReply;

typedef struct _particle_ctrl_PrepareFirmwareUpdateRequest {
    uint32_t size;
/* @@protoc_insertion_point(struct:particle_ctrl_PrepareFirmwareUpdateRequest) */
} particle_ctrl_PrepareFirmwareUpdateRequest;

/* Default values for struct fields */

/* Initializer values for message structs */
#define particle_ctrl_PrepareFirmwareUpdateRequest_init_default {0}
#define particle_ctrl_PrepareFirmwareUpdateReply_init_default {0}
#define particle_ctrl_FinishFirmwareUpdateRequest_init_default {0}
#define particle_ctrl_FinishFirmwareUpdateReply_init_default {0}
#define particle_ctrl_CancelFirmwareUpdateRequest_init_default {0}
#define particle_ctrl_CancelFirmwareUpdateReply_init_default {0}
#define particle_ctrl_SaveFirmwareChunkRequest_init_default {{{NULL}, NULL}}
#define particle_ctrl_SaveFirmwareChunkReply_init_default {0}
#define particle_ctrl_PrepareFirmwareUpdateRequest_init_zero {0}
#define particle_ctrl_PrepareFirmwareUpdateReply_init_zero {0}
#define particle_ctrl_FinishFirmwareUpdateRequest_init_zero {0}
#define particle_ctrl_FinishFirmwareUpdateReply_init_zero {0}
#define particle_ctrl_CancelFirmwareUpdateRequest_init_zero {0}
#define particle_ctrl_CancelFirmwareUpdateReply_init_zero {0}
#define particle_ctrl_SaveFirmwareChunkRequest_init_zero {{{NULL}, NULL}}
#define particle_ctrl_SaveFirmwareChunkReply_init_zero {0}

/* Field tags (for use in manual encoding/decoding) */
#define particle_ctrl_SaveFirmwareChunkRequest_data_tag 1
#define particle_ctrl_FinishFirmwareUpdateRequest_validate_only_tag 1
#define particle_ctrl_PrepareFirmwareUpdateReply_chunk_size_tag 1
#define particle_ctrl_PrepareFirmwareUpdateRequest_size_tag 1

/* Struct field encoding specification for nanopb */
extern const pb_field_t particle_ctrl_PrepareFirmwareUpdateRequest_fields[2];
extern const pb_field_t particle_ctrl_PrepareFirmwareUpdateReply_fields[2];
extern const pb_field_t particle_ctrl_FinishFirmwareUpdateRequest_fields[2];
extern const pb_field_t particle_ctrl_FinishFirmwareUpdateReply_fields[1];
extern const pb_field_t particle_ctrl_CancelFirmwareUpdateRequest_fields[1];
extern const pb_field_t particle_ctrl_CancelFirmwareUpdateReply_fields[1];
extern const pb_field_t particle_ctrl_SaveFirmwareChunkRequest_fields[2];
extern const pb_field_t particle_ctrl_SaveFirmwareChunkReply_fields[1];

/* Maximum encoded size of messages (where known) */
#define particle_ctrl_PrepareFirmwareUpdateRequest_size 6
#define particle_ctrl_PrepareFirmwareUpdateReply_size 6
#define particle_ctrl_FinishFirmwareUpdateRequest_size 2
#define particle_ctrl_FinishFirmwareUpdateReply_size 0
#define particle_ctrl_CancelFirmwareUpdateRequest_size 0
#define particle_ctrl_CancelFirmwareUpdateReply_size 0
/* particle_ctrl_SaveFirmwareChunkRequest_size depends on runtime parameters */
#define particle_ctrl_SaveFirmwareChunkReply_size 0

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define UPDATE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
